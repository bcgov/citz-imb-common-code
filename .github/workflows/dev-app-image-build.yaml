# GitHub Actions workflow for building and tagging the API image on PR
name: Common Code Frontend - Image Build, Tag Push

on:
  pull_request:
    types: [opened, synchronize, ready_for_review] # Triggered by opened or changed pull requests.
    branches: [main]
    paths:
      - 'frontend/**' # Triggers on changes to files in the frontend directory.
  workflow_dispatch:

jobs:
  CoCo-ReactJS-Build-Tag-Push:
    environment: dev
    runs-on: ubuntu-latest
    env:
      NGINX_IMAGE_TAG: ${{ vars.NGINX_IMAGE_TAG }}
      NODE_IMAGE_TAG: ${{ vars.NODE_IMAGE_TAG }}
    steps:
      # check out the repo
      - name: Checkout
        uses: actions/checkout@v3
        with:
          fetch-depth: 0

      # login to the Openshift Cluster
      - name: Login to Openshift
        uses: redhat-actions/oc-login@v1
        with:
          openshift_server_url: ${{ secrets.OPENSHIFT_SERVER_URL }}
          openshift_token: ${{ secrets.OPENSHIFT_SA_TOOLS_TOKEN }}
          namespace: ${{ secrets.OPENSHIFT_TOOLS_NAMESPACE }}

      # Login to BC Gov Docker Image Repository
      - name: Login to Openshift Docker
        run: |
          docker login artifacts.developer.gov.bc.ca/tec1-citz-imb-coco  -u ${{ secrets.ARTIFACTORY_SA_USERNAME }} -p ${{ secrets.ARTIFACTORY_SA_PASSWORD }}

      # Build the ReactJS Image 
      - name: Build ReactJS Image
        run: |
          cd frontend && docker build --build-arg NGINX_IMAGE_TAG=${NGINX_IMAGE_TAG} NODE_IMAGE_TAG=${NODE_IMAGE_TAG} -t artifacts.developer.gov.bc.ca/tec1-citz-imb-coco/coco-frontend:1 -f Dockerfile.prod .

      # Push the ReactJS Image 
      - name: Push ReactJS Image Image
        run: |
          docker push artifacts.developer.gov.bc.ca/tec1-citz-imb-coco/coco-frontend:1

  Update_Wiki_Tags:
    needs: [CoCo-ReactJS-Build-Tag-Push]
    name: Update table in wiki
    runs-on: ubuntu-latest
    env:
      GH_TOKEN: ${{ github.token }}
      
    steps:
      # Checkout the repository
      - name: Checkout
        uses: actions/checkout@v3

      # Clone the wiki repository
      - name: Clone wiki repository
        run: |
          echo "Cloning wiki repo https://github.com/$GITHUB_REPOSITORY.wiki.git"
          git clone "https://$GITHUB_ACTOR:$GH_TOKEN@github.com/$GITHUB_REPOSITORY.wiki.git" ./wiki

      # Setup Python
      - name: Setup Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.10' 

      # Run the update wiki Python script
      - name: Run update wiki Python script
        run: python ./.github/helpers/update-wiki-table.py ./wiki/Image-tags.md "Frontend" "Latest Build Image Tag" "${{github.event.pull_request.number}}"

      # Commit and push changes to the wiki
      - name: Commit and push changes to wiki
        run: |
          cd ./wiki
          git config user.name "$GITHUB_ACTOR"
          git config user.email "$GITHUB_ACTOR@users.noreply.github.com"
          git add .
          if git diff-index --quiet HEAD; then
            echo "Nothing changed"
            exit 0
          fi
          echo "Pushing changes to wiki"
          git commit -m "Value populated at image build API" && git push "https://$GITHUB_ACTOR:$GH_TOKEN@github.com/$GITHUB_REPOSITORY.wiki.git"

      # Add comment to the PR
      - name: Add Comment To the PR
        if: github.event.action == 'opened'
        uses: actions/github-script@v6
        with:
          script: |
            github.rest.issues.createComment({
              issue_number: context.issue.number,
              owner: context.repo.owner,
              repo: context.repo.repo,
              body: "ðŸš€ **Deployment Information**\n\nThe Express API Image has been built with the tag: **`${{github.event.pull_request.number}}`**. Please make sure to utilize this specific tag when promoting these changes to the TEST and PROD environments during the API deployment. For more updates please monitor [Image Tags](https://github.com/bcgov/PIMS/wiki/Image-tags) Page on Wiki."
            })
