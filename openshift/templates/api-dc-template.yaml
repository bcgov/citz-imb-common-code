apiVersion: template.openshift.io/v1
kind: Template
metadata:
  name: ${APPLICATION_NAME}-template
labels:
  template: ${APPLICATION_NAME}-template
objects:
- kind: DeploymentConfig
  apiVersion: apps.openshift.io/v1
  metadata:
    annotations:
      app.openshift.io/route-disabled: 'false'
    name: ${APPLICATION_NAME}
    namespace: ${LICENSE_PLATE}-${ENVIRONMENT}
    labels:
      app: ${APPLICATION_NAME}
      app.kubernetes.io/component: ${APPLICATION_NAME}
      app.kubernetes.io/instance: ${APPLICATION_NAME}
      app.kubernetes.io/name: ${APPLICATION_NAME}
      app.kubernetes.io/part-of: coco-demo
      app.openshift.io/runtime: nodejs
      app.openshift.io/runtime-namespace: ${LICENSE_PLATE}-${ENVIRONMENT}
  spec:
    strategy:
      type: Rolling
      rollingParams:
        updatePeriodSeconds: 1
        intervalSeconds: 1
        timeoutSeconds: 600
        maxUnavailable: 25%
        maxSurge: 25%
      resources: {}
      activeDeadlineSeconds: 21600
    triggers:
      - type: ConfigChange
    replicas: 1
    revisionHistoryLimit: 10
    test: false
    selector:
      app: ${APPLICATION_NAME}
      deploymentconfig: ${APPLICATION_NAME}
    template:
      metadata:
        creationTimestamp: null
        labels:
          app: ${APPLICATION_NAME}
          deploymentconfig: ${APPLICATION_NAME}
        annotations:
          openshift.io/generated-by: OpenShiftWebConsole
          vault.hashicorp.com/agent-inject: 'true'
          vault.hashicorp.com/agent-inject-token: 'false' 
          vault.hashicorp.com/agent-pre-populate-only: 'true' 
          vault.hashicorp.com/auth-path: 'auth/k8s-silver'
          vault.hashicorp.com/namespace: 'platform-services'
          vault.hashicorp.com/role: ${LICENSE_PLATE}-${VAULT_ENVIRONMENT}
          vault.hashicorp.com/agent-inject-secret-coco-secrets-${ENVIRONMENT}: ${LICENSE_PLATE}-${VAULT_ENVIRONMENT}/${ENVIRONMENT}/sso-integration
          vault.hashicorp.com/agent-inject-template-coco-secrets-${ENVIRONMENT}: |
            {{- with secret "${LICENSE_PLATE}-${VAULT_ENVIRONMENT}/${ENVIRONMENT}/sso-integration" }}  
            export SSO_AUTH_SERVER_URL="{{ .Data.data.SSO_AUTH_SERVER_URL }}"
            export SSO_CLIENT_ID="{{ .Data.data.SSO_CLIENT_ID }}"
            export SSO_CLIENT_SECRET="{{ .Data.data.SSO_CLIENT_SECRET }}"
            export SSO_ENVIRONMENT="{{ .Data.data.SSO_ENVIRONMENT }}"
            export SSO_INTEGRATION_ID="{{ .Data.data.SSO_INTEGRATION_ID }}"
            {{- end }}
      spec:
        containers:
          - resources:
              limits:
                cpu: 250m
                memory: 1Gi
              requests:
                cpu: 50m
                memory: 100Mi
            readinessProbe:
              httpGet:
                path: /health
                port: 6600
                scheme: HTTP
              initialDelaySeconds: 60
              timeoutSeconds: 30
              periodSeconds: 10
              successThreshold: 1
              failureThreshold: 3
            terminationMessagePath: /dev/termination-log
            name: ${APPLICATION_NAME}
            command:
              - sh
              - '-c'
            livenessProbe:
              httpGet:
                path: /health
                port: 6600
                scheme: HTTP
              initialDelaySeconds: 60
              timeoutSeconds: 30
              periodSeconds: 10
              successThreshold: 1
              failureThreshold: 3
            env:
              - name: ENVIRONMENT
                value: ${ENVIRONMENT}
              - name: DEBUG
                value: 'false'
              - name: VERBOSE_DEBUG
                value: 'false'
              - name: BACKEND_PORT
                value: '6600'
              - name: FRONTEND_PORT
                value: '6500'
              - name: FRONTEND_URL
                value: 'https://coco-frontend-${LICENSE_PLATE}-${ENVIRONMENT}.apps.silver.devops.gov.bc.ca'
              - name: BACKEND_URL
                value: 'https://coco-api-${LICENSE_PLATE}-${ENVIRONMENT}.apps.silver.devops.gov.bc.ca'
            ports:
              - containerPort: 6600
                protocol: TCP
            imagePullPolicy: IfNotPresent
            terminationMessagePolicy: File
            image: 'artifacts.developer.gov.bc.ca/tec1-citz-imb-coco/coco-api:${IMAGE_TAG}'
            args:
              - . /vault/secrets/coco-secrets-${ENVIRONMENT} && npm run prod
        restartPolicy: Always
        terminationGracePeriodSeconds: 30
        dnsPolicy: ClusterFirst
        serviceAccountName: baf95e-vault
        serviceAccount: baf95e-vault
        securityContext: {}
        schedulerName: default-scheduler

parameters:
  - description: Application Name
    displayName: AppName
    name: APPLICATION_NAME
    required: true
    value: coco-api
  - description: Environment
    displayName: Environment
    name: ENVIRONMENT
    required: true
    value: dev
  - description: License Plate
    displayName: License Plate
    name: LICENSE_PLATE
    required: true
    value: baf95e
  - description: Image Tag Number
    displayName: Image Tag Number
    name: IMAGE_TAG
  - description: Vault Environment
    displayName: Vault Environment
    name: VAULT_ENVIRONMENT
    required: true
    value: nonprod
